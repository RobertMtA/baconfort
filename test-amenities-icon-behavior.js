// Test: Verificar comportamiento completo de iconos en AmenitiesManager
// Fecha: 2024-01-17
// Objetivo: Confirmar que los iconos se muestran solo donde corresponde

const fs = require('fs');
const path = require('path');

function testAmenitiesIconBehavior() {
  console.log('üîç TESTING: Verificando comportamiento completo de iconos en AmenitiesManager...\n');
  
  const filePath = path.join(__dirname, 'baconfort-react/src/components/Admin/AmenitiesManager.jsx');
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    
    // 1. Verificar que NO hay iconos en la vista previa de comodidades
    const hasIconDisplayInPreview = content.includes('amenity-icon-display');
    
    // 2. Verificar que S√ç hay iconos en el formulario de edici√≥n
    const hasIconInEditForm = content.includes('editingAmenity.icon');
    
    // 3. Verificar que S√ç hay iconos en el formulario de agregar
    const hasIconInAddForm = content.includes('newAmenity.icon');
    
    // 4. Verificar que el texto de comodidades sigue presente
    const hasAmenityText = content.includes('amenity-text');
    
    // 5. Verificar que los botones de acci√≥n siguen presentes
    const hasEditActions = content.includes('action-btn edit-btn');
    const hasDeleteActions = content.includes('action-btn delete-btn');
    
    console.log('üìù RESULTADOS:');
    console.log('   VISTA PREVIA DE COMODIDADES:');
    console.log(`     ‚ùå Iconos en vista previa: ${hasIconDisplayInPreview ? 'S√ç (debe ser NO)' : 'NO ‚úì'}`);
    console.log(`     ‚úÖ Texto de comodidades: ${hasAmenityText ? 'S√ç ‚úì' : 'NO (debe ser S√ç)'}`);
    console.log(`     ‚úÖ Botones de editar: ${hasEditActions ? 'S√ç ‚úì' : 'NO (debe ser S√ç)'}`);
    console.log(`     ‚úÖ Botones de eliminar: ${hasDeleteActions ? 'S√ç ‚úì' : 'NO (debe ser S√ç)'}`);
    
    console.log('\n   FORMULARIOS DE EDICI√ìN:');
    console.log(`     ‚úÖ Iconos en formulario de edici√≥n: ${hasIconInEditForm ? 'S√ç ‚úì' : 'NO (debe ser S√ç)'}`);
    console.log(`     ‚úÖ Iconos en formulario de agregar: ${hasIconInAddForm ? 'S√ç ‚úì' : 'NO (debe ser S√ç)'}`);
    
    // Verificar espec√≠ficamente que los iconos del formulario de edici√≥n funcionen
    const editFormIconLines = content.match(/editingAmenity\.icon/g);
    console.log(`     üìä Usos de iconos en edici√≥n: ${editFormIconLines ? editFormIconLines.length : 0}`);
    
    const success = !hasIconDisplayInPreview && 
                   hasIconInEditForm && 
                   hasIconInAddForm && 
                   hasAmenityText && 
                   hasEditActions && 
                   hasDeleteActions;
    
    console.log(`\nüéØ RESUMEN:`);
    console.log(`   Estado: ${success ? '‚úÖ EXITOSO' : '‚ùå FALLIDO'}`);
    console.log(`   Descripci√≥n: ${success ? 'Los iconos funcionan correctamente en cada √°rea' : 'Hay problemas con la configuraci√≥n de iconos'}`);
    
    if (success) {
      console.log(`\nüìã COMPORTAMIENTO CORRECTO:`);
      console.log(`   ‚Ä¢ Vista previa: Solo texto, sin iconos ‚úì`);
      console.log(`   ‚Ä¢ Formulario edici√≥n: Con iconos para selecci√≥n ‚úì`);
      console.log(`   ‚Ä¢ Formulario agregar: Con iconos para selecci√≥n ‚úì`);
      console.log(`   ‚Ä¢ Botones de acci√≥n: Preservados ‚úì`);
      console.log(`   ‚Ä¢ Experiencia: M√°s limpia y enfocada ‚úì`);
    }
    
  } catch (error) {
    console.error('‚ùå Error al verificar el archivo:', error.message);
  }
}

// Ejecutar test
testAmenitiesIconBehavior();

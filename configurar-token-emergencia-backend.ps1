# Configurar token de emergencia en el backend
$ErrorActionPreference = "Stop"

Write-Host "üîß Configurando token de emergencia en el backend..." -ForegroundColor Cyan
Write-Host "----------------------------------------------------------" -ForegroundColor Cyan

# Encontrar la carpeta del backend
Write-Host "üîç Buscando carpetas potenciales del backend..." -ForegroundColor Yellow
$potentialFolders = Get-ChildItem -Path $PSScriptRoot -Directory | Where-Object { 
    $_.Name -like "*api*" -or $_.Name -like "*express*" -or $_.Name -like "*backend*" -or $_.Name -like "*server*"
}

$backendPath = $null

if ($potentialFolders.Count -eq 0) {
    Write-Host "‚ö†Ô∏è No se encontraron carpetas potenciales del backend." -ForegroundColor Yellow
    Write-Host "Intente ejecutar manualmente este script desde la carpeta que contiene el backend." -ForegroundColor Yellow
} else {
    Write-Host "Seleccione la carpeta del backend:" -ForegroundColor White
    for ($i=0; $i -lt $potentialFolders.Count; $i++) {
        Write-Host "[$i] $($potentialFolders[$i].Name)" -ForegroundColor White
    }
    
    $selection = Read-Host "Ingrese el n√∫mero de la carpeta (o 'S' para omitir)"
    
    if ($selection -ne "S" -and $selection -ne "s") {
        try {
            $backendPath = $potentialFolders[[int]$selection].FullName
            Write-Host "‚úÖ Carpeta del backend seleccionada: $backendPath" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Selecci√≥n no v√°lida." -ForegroundColor Red
        }
    }
}

if ($backendPath) {
    # Buscar archivos de autenticaci√≥n
    Write-Host "üîç Buscando archivos de autenticaci√≥n..." -ForegroundColor Yellow
    $authFiles = Get-ChildItem -Path $backendPath -Recurse -Include "*auth*.js", "*middleware*.js", "*token*.js" 
    
    if ($authFiles.Count -eq 0) {
        Write-Host "‚ùå No se encontraron archivos de autenticaci√≥n." -ForegroundColor Red
    } else {
        Write-Host "Encontrados $($authFiles.Count) archivos potenciales:" -ForegroundColor White
        foreach ($file in $authFiles) {
            Write-Host "- $($file.FullName)" -ForegroundColor White
            
            # Buscar contenido relevante
            $content = Get-Content $file.FullName -Raw
            
            # Verificar si el archivo contiene c√≥digo relacionado con tokens
            if ($content -match "token|auth|verify|jwt") {
                Write-Host "  ‚úÖ Este archivo parece contener c√≥digo de autenticaci√≥n" -ForegroundColor Green
                
                # Verificar si ya contiene el token de emergencia
                if ($content -match "ADMIN_BYPASS_TOKEN_EMERGENCY_ACCESS") {
                    Write-Host "  ‚úÖ Ya contiene el token de emergencia" -ForegroundColor Green
                } else {
                    # Hacer copia de seguridad
                    Copy-Item -Path $file.FullName -Destination "$($file.FullName).bak" -Force
                    Write-Host "  üìù Creada copia de seguridad: $($file.FullName).bak" -ForegroundColor Yellow
                    
                    try {
                        # Modificar el archivo para agregar el token de emergencia
                        $newContent = $content
                        
                        # Buscar un punto adecuado para insertar el c√≥digo
                        if ($content -match "verifyToken|authenticate|authorization|Bearer") {
                            # Identificar el patr√≥n para agregar el c√≥digo de bypass
                            $bypassCode = @"
            
  // Token de emergencia para bypass de autenticaci√≥n
  if (req.query.bypass === 'true' && req.query.emergency === 'true') {
    if (token === 'ADMIN_BYPASS_TOKEN_EMERGENCY_ACCESS') {
      console.log('‚ö†Ô∏è Usando token de emergencia para bypass de autenticaci√≥n');
      req.user = { role: 'admin', bypassEmergency: true };
      return next();
    }
  }

"@
                            
                            # Intentar insertar despu√©s de la verificaci√≥n del token
                            if ($content -match "const token = authHeader\.split\(' '\)\[1\];") {
                                $newContent = $content -replace "const token = authHeader\.split\(' '\)\[1\];", "const token = authHeader.split(' ')[1];$bypassCode"
                            }
                            # Si no funciona, intentar otro patr√≥n
                            elseif ($content -match "return res\.status\(401\)") {
                                $newContent = $content -replace "(return res\.status\(401\)[^;]+;)", "$bypassCode`$1"
                            }
                            
                            if ($newContent -ne $content) {
                                Set-Content -Path $file.FullName -Value $newContent
                                Write-Host "  ‚úÖ Agregado c√≥digo de bypass de autenticaci√≥n" -ForegroundColor Green
                            } else {
                                Write-Host "  ‚ö†Ô∏è No se pudo modificar autom√°ticamente. Revise el archivo manualmente." -ForegroundColor Yellow
                            }
                        }
                    } catch {
                        Write-Host "  ‚ùå Error al modificar el archivo: $_" -ForegroundColor Red
                    }
                }
            }
        }
    }
} else {
    Write-Host "‚ÑπÔ∏è Operaci√≥n omitida." -ForegroundColor Blue
}

Write-Host ""
Write-Host "üìã Pasos siguientes:" -ForegroundColor Cyan
Write-Host "1. Si no se encontr√≥ o modific√≥ el backend, deber√° modificar manualmente los archivos de autenticaci√≥n" -ForegroundColor White
Write-Host "2. Reinicie el servidor backend para aplicar los cambios" -ForegroundColor White
Write-Host "3. Pruebe la autenticaci√≥n con las modificaciones realizadas" -ForegroundColor White
